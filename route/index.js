// Generated by CoffeeScript 1.6.3
var async, cards, convertObjectToHtml, convertObjectToText, fetchCardFullContent, fs, jquery, jsdom, mkdirp, request, typeIsArray, unescapeHtml, xml2json, _,
  _this = this;

fs = require('fs');

xml2json = require('xml2json');

_ = require('underscore')._;

async = require('async');

request = require('request');

mkdirp = require('mkdirp');

jsdom = require('jsdom');

jquery = fs.readFileSync("./lib/jquery.js", "utf-8");

fetchCardFullContent = function(card, cb) {
  var filePath;
  console.log("Requesting a response for url: '" + card.url + "'");
  filePath = "pages/" + card.id + ".html";
  return fs.lstat(filePath, function(err, stats) {
    if (!err && stats.isFile()) {
      return fs.readFile(filePath, function(err, body) {
        return jsdom.env({
          html: body,
          src: [jquery],
          done: function(err, window) {
            var fullContent;
            if (err) {
              cb(err);
            } else {
              window.$("#card_images").remove();
              fullContent = window.$("#main-content").html();
              card.fullContent = fullContent;
              cb(null, card);
            }
            return window.close();
          }
        });
      });
    } else {
      return request.get(card.url, function(err, response, body) {
        if (err) {
          console.log("Could not get Url: " + card.url + ", Error: '" + err.message + "'");
          return cb(err);
        } else if (response.statusCode !== 200) {
          return cb(new Error("Status code - " + response.statusCode));
        } else {
          console.log("Got a response for url: '" + card.url + "'");
          return jsdom.env({
            html: body,
            src: [jquery],
            done: function(err, window) {
              if (err) {
                cb(err);
              } else {
                window.$("#card_images").remove();
                card.fullContent = window.$("#main-content").html();
                cb(null, card);
                mkdirp("pages", function(err) {
                  if (!err || err.code === 'EEXIST') {
                    return fs.writeFile(filePath, body);
                  }
                });
              }
              return window.close();
            }
          });
        }
      });
    }
  });
};

cards = function(req, res) {
  var categories, data, dataAsXml, deck;
  dataAsXml = fs.readFileSync('./data/cards.xml');
  data = JSON.parse(xml2json.toJson(dataAsXml));
  deck = data.deck;
  categories = deck.categories.category;
  delete deck.categories;
  _(categories).each(function(category) {
    delete category.cmyk;
    category.backgroundColor = category["background-color"];
    return delete category["background-color"];
  });
  deck.cards = deck.card;
  delete deck.card;
  _(deck.cards).each(function(card) {
    if (card.altid) {
      card.id = card.altid;
      delete card.altid;
    }
    card.category = _(categories).find(function(category) {
      return card.category === category.id;
    });
    card.sponsors = _(card.sponsors.split(" ")).map(function(sponsor) {
      return {
        id: sponsor
      };
    });
    console.log("Card ID: " + card.id);
    console.log("Card tags: " + card.tags);
    card.tags = !card.tags ? [] : _(card.tags.split(" ")).map(function(tag) {
      return {
        id: tag
      };
    });
    card.title = convertObjectToText(card.front);
    delete card.front;
    card.note = unescapeHtml(card.note);
    card.description = convertObjectToHtml(card.back);
    delete card.back;
    if (!card.ulink) {
      card.ulink = [];
    }
    if (!Array.isArray(card.ulink)) {
      card.ulink = [card.ulink];
    }
    card.ulinks = card.ulink;
    delete card.ulink;
    card.url = "http://essentials.xebia.com/" + card.id;
    return delete card.bitly;
  });
  return async.map(deck.cards, fetchCardFullContent, function(err, results) {
    if (err) {
      console.log("Could not get card data content");
      return res.send(500, err.message);
    } else {
      console.log("Got full content for " + results.length + " cards");
      return res.json(deck);
    }
  });
};

convertObjectToHtml = function(data) {
  var html, key, result, value;
  html = "";
  for (key in data) {
    value = data[key];
    if (key === "para") {
      if (typeIsArray(value)) {
        html += value.reduce(function(x, y) {
          return "" + x + " " + y;
        });
      } else {
        html += "<p>" + value + "</p>";
      }
    } else if (key === "blockquote") {
      result = convertObjectToHtml(value);
      html += "<blockquote>" + result + "</blockquote>";
    } else if (key === "ul") {
      result = value.li.map(function(liContent) {
        return "<li>" + liContent + "</li>";
      });
      html += "<ul>" + (result.join("")) + "</ul>";
    } else if (key === "attribution") {
      result = "<p><i>" + value + "</i></p>";
    } else {
      html += "<p>" + value + "</p>";
    }
  }
  return unescapeHtml(html);
};

convertObjectToText = function(data) {
  var key, text, value;
  text = "";
  for (key in data) {
    value = data[key];
    if (key === "para") {
      if (typeIsArray(value)) {
        text += value.reduce(function(x, y) {
          return "" + x + ", " + y;
        });
      } else {
        text += "" + value;
      }
    } else {
      text += "" + value;
    }
  }
  return unescapeHtml(text);
};

unescapeHtml = function(value) {
  if (value === void 0) {
    return void 0;
  } else {
    return value.replace("&apos;", "'");
  }
};

typeIsArray = Array.isArray || function(value) {
  return {}.toString.call(value) === '[object Array]';
};

module.exports = {
  cards: cards
};
